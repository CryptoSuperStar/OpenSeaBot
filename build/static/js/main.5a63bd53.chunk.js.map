{"version":3,"sources":["redux/actions/user.js","pages/Home/index.jsx","router/index.jsx","App.js","reportWebVitals.js","redux/reducers/user.js","redux/reducers/index.js","configureStore.js","index.js"],"names":["setNetwork","createAction","setUserAccounts","createActions","CONNECT_WALLET_REQUEST","CONNECT_WALLET_SUCCESS","data","CONNECT_WALLET_FAIL","error","connectWalletRequest","connectWalletSuccess","connectWalletFail","connectMetamask","dispatch","a","window","ethereum","detectEthereumProvider","provider","web3","Web3","request","method","then","chainId","eth","getAccounts","accounts","getBalance","balance","console","log","process","seaport","OpenSeaPort","networkName","Network","Rinkeby","apiKey","catch","Promise","resolve","reject","err","updateUserBalance","currentProvider","isArray","Home","state","collectionSlug","startToken","endToken","startAmount","handleOnChange","e","setState","target","name","value","handleBidding","props","userAccountState","accountAddress","assets","axios","url","responseType","response","collection","i","parseInt","push","tokenId","tokenAddress","primary_asset_contracts","address","createBuyOrder","asset","offer1","offer","this","connectWalletState","connectError","get","errorCode","toString","alert","type","onChange","placeholder","onClick","Component","connect","user","userAccount","connectWallet","bindActionCreators","Router","exact","path","component","App","useDispatch","useEffect","isEmpty","ris3Balance","on","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","handleActions","SET_NETWORK","payload","SET_USER_ACCOUNTS","has","isConnect","requesting","CLEAR_TRANSACTION_LOGS","transactionLogs","result","STORE_TRANSACTION_LOG","explorerUrl","userConfig","key","storage","localForage","whitelist","reducer","persistReducer","createHistory","require","configureStore","initialState","history","createBrowserHistory","middleware","thunk","store","createStore","combineReducers","rootReducer","router","connectRouter","compose","applyMiddleware","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a63bd53.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport { createAction, createActions } from 'redux-actions';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport BigNumber from 'bignumber.js';\r\nimport { get, isArray } from 'lodash';\r\nimport { OpenSeaPort, Network } from 'opensea-js'\r\n\r\n// import Api from '../api';\r\n// import Abi from '../../resources/abi';\r\n// import { getExplorerUrl, tokenRootSymbols, claimContractAddress } from '../../utils';\r\n\r\n\r\n/** SET NETWORK **/\r\nexport const setNetwork = createAction('SET_NETWORK');\r\n\r\n/** SET USER ACCOUNTS **/\r\nexport const setUserAccounts = createAction('SET_USER_ACCOUNTS');\r\n\r\n/** CONNECT TO METAMASK **/\r\nconst { connectWalletRequest, connectWalletSuccess, connectWalletFail } = createActions({\r\n  CONNECT_WALLET_REQUEST: () => { },\r\n  CONNECT_WALLET_SUCCESS: data => ({ data }),\r\n  CONNECT_WALLET_FAIL: error => ({ error })\r\n});\r\n\r\nexport const addTokenToMetamask = (tokenAddress, tokenSymbol, tokenDecimals) => {\r\n  return window.ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals\r\n        // image: tokenImage,\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport const connectMetamask = () => async (dispatch) => {\r\n  dispatch(connectWalletRequest());\r\n\r\n  // Check metamask is install or not\r\n  if (window.ethereum) {\r\n    const provider = await detectEthereumProvider();\r\n    // If the provider returned by detectEthereumProvider is not the same as\r\n    // window.ethereum, something is overwriting it, perhaps another wallet.\r\n    if (provider !== window.ethereum) {\r\n      window.web3 = new Web3(provider);\r\n    } else {\r\n      window.web3 = new Web3(window.ethereum);\r\n    }\r\n\r\n    return window.ethereum.request({ method: 'eth_requestAccounts' })\r\n      .then(async () => {\r\n        const chainId = window.ethereum.chainId;\r\n        // const explorerUrl = getExplorerUrl(chainId);\r\n        const accounts = await window.web3.eth.getAccounts();\r\n        const balance = await window.web3.eth.getBalance(accounts[0]);\r\n        console.log(\"process.env.REACT_APP_OPENSEA_API_KEY: \", process.env.REACT_APP_OPENSEA_API_KEY);\r\n        const seaport = new OpenSeaPort(provider, {\r\n          networkName: Network.Rinkeby,\r\n          apiKey: process.env.REACT_APP_OPENSEA_API_KEY\r\n        });\r\n\r\n        dispatch(connectWalletSuccess());\r\n        dispatch(setUserAccounts({ accounts, balance, chainId, seaport }));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(connectWalletFail(error));\r\n      });\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const err = 'Metamask not install.';\r\n\r\n    resolve(err);\r\n    return dispatch(connectWalletFail(err));\r\n  });\r\n};\r\n\r\n/** UPDATE USER BALANCE **/\r\nexport const updateUserBalance = (accounts) => async (dispatch) => {\r\n  window.web3 = new Web3(window.web3.currentProvider);\r\n\r\n  const balance = await window.web3.eth.getBalance(isArray(accounts) ? accounts[0] : accounts);\r\n  dispatch(setUserAccounts({ balance }));\r\n};\r\n\r\n","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n// import style from './Home.module.scss';\r\nimport { connectMetamask } from '../../redux/actions/user';\r\nimport { get } from 'lodash';\r\n\r\n// import * as Web3 from 'web3';\r\n// import { OpenSeaPort, Network } from 'opensea-js';\r\nimport axios from 'axios';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        collectionSlug: 'azuki-god',\r\n        startToken: 0,\r\n        endToken: 0,\r\n        startAmount: 0.04\r\n    }\r\n    // const history = useHistory();\r\n    // const { setConnectModalOpen } = useContext(AppContextType);\r\n    // const accountAddress = useSelector(state => state.user.userAccount?.accounts[0] ?? '');\r\n    // const featuresRef = useRef(null);\r\n\r\n    componentDidMount() {\r\n        const { connectMetamask } = this.props;\r\n\r\n        connectMetamask().then(() => {\r\n            const { connectWalletState } =  this.props;\r\n            // const isConnect = get(connectWalletState, 'isConnect');\r\n            // if (isConnect) {\r\n            //     // this.setState({})\r\n            //     // return history.push(path);\r\n            // }\r\n\r\n            const connectError = get(connectWalletState, 'error');\r\n\r\n            if (connectError) {\r\n                const errorCode = get(connectError, 'code', '');\r\n                if (errorCode.toString() === '-32002') {\r\n                return alert('Please login to Metamask');\r\n                }\r\n                // TODO Make popup ask user install extension\r\n                if (errorCode.toString() === '-32000') {\r\n                return true;\r\n                }\r\n                console.log('connectError: ', connectError);\r\n                return alert('Please install Metamask extension!');\r\n            }\r\n        });\r\n\r\n        // if (web3Provider != null) {\r\n        //     console.log(\"web3Provider: \", web3Provider);\r\n        // }\r\n        \r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleBidding = async () => {\r\n        const { seaport, userAccountState } = this.props;\r\n        const { collectionSlug, startToken, endToken, startAmount } = this.state;\r\n        const accountAddress = userAccountState.accounts[0];\r\n        console.log(\"accountAddress: \", accountAddress);\r\n        let assets = [];\r\n        console.log(\"hello collection\");\r\n\r\n        //get collection details\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: process.env.REACT_APP_OPENSEA_TESTNET_API_URL +'v1/collection/'+ collectionSlug,  // example:- azuki-god\r\n            responseType: 'json'\r\n        });\r\n\r\n        if (response.data && response.data.collection) {\r\n            const collection = response.data.collection;\r\n            for (var i = parseInt(startToken); i <= parseInt(endToken); i++) {\r\n                assets.push({tokenId: i, tokenAddress: collection.primary_asset_contracts[0].address});\r\n            }\r\n\r\n            console.log(\"assets: \", assets);\r\n\r\n            //single token buy order\r\n            const offer1 = await seaport.createBuyOrder({\r\n                asset: {\r\n                  tokenId: 175,\r\n                  tokenAddress: '0xb74bf94049d2c01f8805b8b15db0909168cabf46',\r\n                  //schemaName // WyvernSchemaName. If omitted, defaults to 'ERC721'. Other options include 'ERC20' and 'ERC1155'\r\n                },\r\n                accountAddress,\r\n                // Value of the offer, in units of the payment token (or wrapped ETH if none is specified):\r\n                startAmount,\r\n            });\r\n            console.log(\"offer1: \", offer1);\r\n\r\n            return;\r\n            //multiple tokens buy orders\r\n            const offer = await seaport.createBundleBuyOrder({\r\n                assets,\r\n                accountAddress,\r\n                startAmount,\r\n                // Optional expiration time for the order, in Unix time (seconds):\r\n                // expirationTime: Math.round(Date.now() / 1000 + 60 * 60 * 24) // One day from now\r\n            });\r\n            console.log(\"offer: \", offer);\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        const { state } = this.state;\r\n        return (\r\n            <div>\r\n                <h1>Opensea Bidding Bot</h1>\r\n                <input type=\"text\" name=\"collectionSlug\" value={this.state.collectionSlug} onChange={e => this.handleOnChange(e)} placeholder=\"Enter collection slug\"></input><br/>\r\n                <label>Start Token</label>\r\n                <input type=\"number\" name=\"startToken\" value={this.state.startToken} onChange={e => this.handleOnChange(e)}></input><br/>\r\n                <label>End Token</label>\r\n                <input type=\"number\" name=\"endToken\" value={this.state.endToken} onChange={e => this.handleOnChange(e)}></input><br/>\r\n                <label>Price</label>\r\n                <input type=\"number\" name=\"startAmount\" value={this.state.startAmount} onChange={e => this.handleOnChange(e)}></input><br/>\r\n\r\n                <button onClick={() => this.handleBidding()}>Start</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n      userAccountState: state.user.userAccount,\r\n      connectWalletState: state.user.connectWallet,\r\n      seaport: state.user.seaport\r\n    }),\r\n    dispatch => bindActionCreators({\r\n      connectMetamask\r\n    }, dispatch),\r\n)(Home);\r\n  \r\n","import React, { Component} from 'react';\r\nimport {Switch, Route, BrowserRouter} from 'react-router-dom';\r\n\r\nimport Home from \"../pages/Home\";\r\n\r\nconst PAGE_HOME_PATH = '/';\r\n\r\nclass Router extends Component {\r\n\r\n    // componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //     const {location} = this.props;\r\n\r\n    //     if (location.key !== prevProps.location.key) {\r\n    //         window.scrollTo(0,0);\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        // const {location} = this.props;\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path={PAGE_HOME_PATH} component={Home} key={PAGE_HOME_PATH}/>\r\n                </Switch>\r\n            </BrowserRouter>\r\n            //</CSSTransition>\r\n            //</TransitionGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Router;","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Web3 from 'web3';\nimport { get, isEmpty } from 'lodash';\n// import logo from './logo.svg';\nimport './App.css';\nimport Router from './router';\n\nimport { setNetwork, setUserAccounts, updateUserBalance } from './redux/actions/user';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n      if (window.ethereum) {\n          window.ethereum.request({ method: 'eth_accounts' }).then((accounts) => {\n              if (isEmpty(accounts)) {\n                  dispatch(setUserAccounts({ accounts: [], balance: 0, ris3Balance: 0 }));\n              } else {\n                  dispatch(setUserAccounts({ accounts }));\n                  dispatch(updateUserBalance(accounts));\n              }\n          });\n\n          window.ethereum.request({ method: 'eth_chainId' }).then((chainId) => {\n              // Set network when first time enter page\n              dispatch(setNetwork(chainId));\n          });\n      }\n\n      window.ethereum && window.ethereum.on('accountsChanged', (accounts) => {\n          const isFortmatic = get(window, 'web3.currentProvider.isFortmatic');\n          if (isFortmatic) {\n              return;\n          }\n\n          dispatch(setUserAccounts({ accounts }));\n          if (!isEmpty(accounts)) {\n              dispatch(updateUserBalance(accounts));\n          }\n      });\n\n      window.ethereum && window.ethereum.on('chainChanged', async (chainId) => {\n          dispatch(setNetwork(chainId));\n\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          let balance;\n\n          if (!isEmpty(accounts)) {\n              balance = await web3.eth.getBalance(accounts[0]);\n              dispatch(updateUserBalance(accounts));\n          }\n\n          dispatch(setUserAccounts({ chainId, balance }));\n      });\n  });\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        \n      </header> */}\n      <Router/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { isEmpty, get, has } from 'lodash';\r\nimport { handleActions } from 'redux-actions';\r\n\r\nconst initialState = {\r\n  connectWallet: {\r\n    error: null,\r\n    isConnect: false,\r\n    requesting: false,\r\n  },\r\n  userAccount: {\r\n    balance: 0,\r\n    accounts: [],\r\n    error: null,\r\n    requesting: false,\r\n  },\r\n  chainId: '',\r\n  explorerUrl: 'https://ropsten.etherscan.io',\r\n  seaport: null,\r\n  transactionLogs: {\r\n    result: [],\r\n  }\r\n};\r\n\r\nconst user = handleActions({\r\n  SET_NETWORK: (state, { payload }) => ({\r\n    ...state,\r\n    chainId: payload,\r\n  }),\r\n\r\n  /** SET USER ACCOUNTS **/\r\n  SET_USER_ACCOUNTS: (state, { payload }) => ({\r\n    ...state,\r\n    userAccount: {\r\n      ...state.userAccount,\r\n      accounts: has(payload, 'accounts') ? payload.accounts : state.userAccount.accounts,\r\n      balance: has(payload, 'balance') ? payload.balance : state.userAccount.balance,\r\n    },\r\n    connectWallet: {\r\n      ...state.connectWallet,\r\n      ...{ isConnect: !isEmpty(payload.accounts) },\r\n    },\r\n    chainId: has(payload, 'chainId') ? payload.chainId : state.chainId,\r\n    seaport: has(payload, 'seaport') ? payload.seaport : state.seaport\r\n    // explorerUrl: has(payload, 'explorerUrl') ? payload.explorerUrl : state.explorerUrl\r\n  }),\r\n\r\n  /** CONNECT WALLET **/\r\n  CONNECT_WALLET_REQUEST: (state) => ({\r\n    ...state,\r\n    connectWallet: {\r\n      ...state.connectWallet,\r\n      requesting: true,\r\n    },\r\n  }),\r\n  CONNECT_WALLET_SUCCESS: (state) => ({\r\n    ...state,\r\n    connectWallet: {\r\n      ...state.connectWallet,\r\n      requesting: false,\r\n      isConnect: true,\r\n      error: null,\r\n    },\r\n  }),\r\n  CONNECT_WALLET_FAIL: (state, { payload }) => ({\r\n    ...state,\r\n    connectWallet: {\r\n      ...state.connectWallet,\r\n      requesting: false,\r\n      error: payload.error,\r\n    },\r\n  }),\r\n\r\n  \r\n  /* CLEAR TRANSACTION LOGS */\r\n  CLEAR_TRANSACTION_LOGS: (state, { payload }) => ({\r\n    ...state,\r\n    transactionLogs: {\r\n      result: payload,\r\n    },\r\n  }),\r\n\r\n  /* STORE TRANSACTION LOG */\r\n  STORE_TRANSACTION_LOG: (state, { payload }) => ({\r\n    ...state,\r\n    transactionLogs: {\r\n      result: [\r\n        ...get(state, 'transactionLogs.result', []),\r\n        payload,\r\n      ],\r\n    },\r\n  }),\r\n\r\n}, initialState);\r\n\r\nexport default user;\r\n\r\n","import localForage from 'localforage';\r\nimport user from './user';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\n\r\n// const commonConfig = {\r\n//   key: 'common',\r\n//   storage: localForage,\r\n//   whitelist: []\r\n// };\r\n\r\nconst userConfig = {\r\n  key: 'user',\r\n  storage: localForage,\r\n  whitelist: []\r\n};\r\n\r\nconst reducer = {\r\n  user: persistReducer(userConfig, user)\r\n};\r\n\r\nexport default reducer;\r\n","import { applyMiddleware, compose, createStore, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore } from 'redux-persist';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport rootReducer from './redux/reducers';\r\n\r\nconst createHistory = require('history');\r\n\r\nfunction configureStoreProd(initialState = {}) {\r\n  const history = createHistory.createBrowserHistory();\r\n  const middleware = [thunk];\r\n\r\n  const store = createStore(\r\n    combineReducers({\r\n      ...rootReducer,\r\n      router: connectRouter(history)\r\n    }),\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(...middleware)\r\n    )\r\n  );\r\n\r\n  const persistor = persistStore(store);\r\n\r\n  return { store, persistor, history };\r\n}\r\n\r\nfunction configureStoreDev(initialState = {}) {\r\n  const history = createHistory.createBrowserHistory();\r\n  const middleware = [thunk];\r\n\r\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  const store = createStore(\r\n    combineReducers({\r\n      ...rootReducer,\r\n      router: connectRouter(history)\r\n    }),\r\n    initialState,\r\n    composeEnhancers(\r\n      applyMiddleware(...middleware)\r\n    )\r\n  );\r\n\r\n  const persistor = persistStore(store);\r\n\r\n  return { store, persistor, history };\r\n}\r\n\r\nconst configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\r\n\r\nexport default configureStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Init Redux\nimport createStore from './configureStore';\n// import { RefreshContextProvider } from \"./context/RefreshContext\";\nconst { store, history } = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Route component={(props) => <App {...props}/> } />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}